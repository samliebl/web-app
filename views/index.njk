{% extends "_layouts/base.njk" %}
{% block content %}
<!-- Section outlining the GET response -->
<section id="test-get">
    <h2>Demonstration of a <code>GET</code> API call/request</h2>
    <p>The fact this page is rendering is a demonstration of a <code>GET</code> API call. If you're familiar working with the server framework <a href="https://expressjs.com/">Express</a>, this should look very familiar.</p>
    <p>Behind the scenes, the server contains the following routing for the API calls:</p>
    <pre><code class="language-js">// Routes
app.get('/', (req, res) => {
    res.render('index.njk', wrapper); // Pass the wrapper as context
});

app.post('/submit', (req, res) => {
    const { name } = req.body;
    res.json({ message: `Hello, ${name}! This is a POST response.` });
});

// All things with the Whisper POST request are further down in `server.js`. 
// There are many lines of code, so in the interest of brevity, I'm not 
// including them here. For details, check out the source code on GitHub.</code></pre>
    <p>When the user navigates to the base directory (<code>/</code>), the backend is serving a Nunjucks template to render to HTML in the browser via a GET API call.</p>
</section>
<hr>
<!-- Section to test POST request -->
<h2 id="test-post">Two Demonstrations of <code>POST</code> API call/requests</h2>
<!-- Simple POST request demonstration -->
<section id="test-post-simple">
    <h3>1: A simple <code>POST</code> API call/request</h3>
    <form id="nameForm" action="/submit" method="POST">
        <input type="text" name="name" id="nameInput" placeholder="Enter your name">
        <button type="submit">Submit</button>
    </form>
    <!-- Placeholder for displaying styled POST response -->
    <div id="responseMessage"></div>
    <!-- Placeholder for displaying raw JSON POST response -->
    <pre id="jsonResponse"></pre>
</section>
<hr>
<!-- Section to test Whisper POST request -->
<section id="test-post-whisper">
    <h3>2: A more complex <code>POST</code> request</h3>
    <p>This part is a bit more interesting. I'm particularly interested in text-to-speech and speech-to-text work. I've had a lot of fun playing around with <a href="https://openai.com/index/whisper/">Whisper</a> by <a href="https://openai.com">OpenAI</a>. You may know them as the makers of ChatGPT. Whisper is a pretty advanced, at least for the general public, way to build transcription features into applications. You upload a file of someone talking and it transcribes it.</p>
    <p>As a personal request, please keep it two minutes or less. I'm paying OpenAI for this myself!</p>
    <form id="transcription-form" enctype="multipart/form-data">
        <label for="audio">Upload audio of someone talking in one of these formats: <code>.mp3</code>, <code>.wav</code>, <code>.m4a</code>, <code>.ogg</code> or <code>.webm</code>.</label>
        <input type="file" name="audio" accept="audio/*" required />
        <button type="submit">Upload and Transcribe</button>
    </form>
    <div id="transcription-result" style="display: none;">
        <h2>Transcription Result</h2>
        <p id="transcription-text"></p>
        <div>
            <a href="#" id="copy-result" onclick="copyToClipboard(event)">Copy Result</a> |
            <a href="#" onclick="clearTranscription(event)">Clear Transcription</a> |
            <a id="download-link" href="#" download>Download Transcription</a>
        </div>
    </div>
    <script>
    document.getElementById('transcription-form').addEventListener('submit', async function(event) {
        event.preventDefault();

        const formData = new FormData(this);

        try {
            const response = await fetch('/transcribe', {
                method: 'POST',
                body: formData
            });
            const result = await response.json();

            if (result.transcription) {
                document.getElementById('transcription-text').textContent = result.transcription;
                document.getElementById('download-link').href = `/download-transcription/${result.fileName}`;
                document.getElementById('transcription-result').style.display = 'block';
            } else {
                document.getElementById('transcription-text').textContent = 'Transcription failed. Please try again.';
                document.getElementById('transcription-result').style.display = 'block';
            }
        } catch (error) {
            console.error('Error:', error);
            document.getElementById('transcription-text').textContent = 'An error occurred. Please try again later.';
            document.getElementById('transcription-result').style.display = 'block';
        }
    });

    // Function to copy transcription text to clipboard
    function copyToClipboard(event) {
        event.preventDefault(); // Prevents the page from jumping to the top
        const transcriptionText = document.getElementById('transcription-text').textContent;
        navigator.clipboard.writeText(transcriptionText).catch(err => {
            console.error('Failed to copy text:', err);
        });
    }

    // New function to clear the transcription result
    function clearTranscription(event) {
        event.preventDefault(); // Prevents the page from jumping to the top
        document.getElementById('transcription-text').textContent = ""; // Clear the text content
        document.getElementById('transcription-result').style.display = 'none'; // Hide the result section
    }
    </script>
</section>
<hr>
<section id="client-side-javascript">
    <h2>Details on the client-side JavaScript</h2>
    <p>We all love the server side. But I started in web development as a front-end developer. I wanted to make my websites look nice and load quickly. So you aren't getting out of here without me showing off some of the client side stuff going on.</p>
    <p>The JavaScript working on the front end to tie it all together and improve user experience. The technique we‚Äôre employing here is called AJAX,<sup>1</sup> and it‚Äôs pretty much manadatory for any kind of UX I‚Äôd want to create.</p>
    <p>That‚Äôs a technique that enables sites to update without a full reload. Without it, all this would still work‚Äîyou‚Äôd just be taken over to a new, separate page with the options to copy or download the file. I think it's nicer when it just populates right there.</p>
    <pre><code class="language-js">document.getElementById('transcription-form').addEventListener('submit', async function(event) {
    event.preventDefault();

    const formData = new FormData(this);

    try {
        const response = await fetch('/transcribe', {
            method: 'POST',
            body: formData
        });
        const result = await response.json();

        if (result.transcription) {
            document.getElementById('transcription-text').textContent = result.transcription;
            document.getElementById('download-link').href = `/download-transcription/${result.fileName}`;
            document.getElementById('transcription-result').style.display = 'block';
        } else {
            document.getElementById('transcription-text').textContent = 'Transcription failed. Please try again.';
            document.getElementById('transcription-result').style.display = 'block';
        }
    } catch (error) {
        console.error('Error:', error);
        document.getElementById('transcription-text').textContent = 'An error occurred. Please try again later.';
        document.getElementById('transcription-result').style.display = 'block';
    }
});</code></pre>
    <p>You can also dive in ‚Äúinspecting‚Äù this page (on any browser, you cam right click and select an option that should be something like ‚ÄúInspect‚Äù or ‚ÄúInspect this webpage‚Äù, ‚ÄúInspect element‚Äù, etc.) with your browser‚Äôs developer tools. Finally, you can review the code on the <a href="https://github.com/samliebl/web-app">GitHub repo</a> in the <code>views/index.njk</code> template.</p>
</section>
<section>
    <h4>Notes</h4>
    <ol>
        <li>AJAX (Asynchronous JavaScript and XML) is a way to (among many other things) go back and forth with servers in such a way that it allows parts of a page to <em>update without a full reload.</em> In this application, AJAX is utilized to handle ‚Äúform submissions‚Äù (uploading that file and returning the transcription). When you submit that form (or uploads a file), AJAX shoots it to the server in the background. While nobody‚Äôs looking üòÜ, the page updates dynamically and it‚Äôs just right there!</li>
    </ol>
</section>
<!-- Client-side JavaScript for handling AJAX requests -->
<script type="text/javascript">
// Handle POST request for form submission
document.getElementById('nameForm').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent default form submission

    // Get the input value
    const nameInput = document.getElementById('nameInput').value;

    // Send AJAX request to server
    fetch('/submit', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name: nameInput })
        })
        .then(response => response.json())
        .then(data => {
            // Display the POST response message in styled HTML
            document.getElementById('responseMessage').innerHTML = `
            <p>${data.message}</p>
        `;

            // Display the raw JSON POST response
            document.getElementById('jsonResponse').textContent = JSON.stringify(data, null, 2);
        })
        .catch(error => console.error('Error:', error));
});
</script>
{% endblock %}